// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: will/will.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Will struct {
	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Testatorname  string `protobuf:"bytes,2,opt,name=testatorname,proto3" json:"testatorname,omitempty"`
	Testatorid    string `protobuf:"bytes,3,opt,name=testatorid,proto3" json:"testatorid,omitempty"`
	Beneficiaries string `protobuf:"bytes,4,opt,name=beneficiaries,proto3" json:"beneficiaries,omitempty"`
	Assets        string `protobuf:"bytes,5,opt,name=assets,proto3" json:"assets,omitempty"`
	Executorname  string `protobuf:"bytes,6,opt,name=executorname,proto3" json:"executorname,omitempty"`
	Executorid    string `protobuf:"bytes,7,opt,name=executorid,proto3" json:"executorid,omitempty"`
	Datecreated   string `protobuf:"bytes,8,opt,name=datecreated,proto3" json:"datecreated,omitempty"`
	Timecreated   string `protobuf:"bytes,9,opt,name=timecreated,proto3" json:"timecreated,omitempty"`
	Dateexecuted  string `protobuf:"bytes,10,opt,name=dateexecuted,proto3" json:"dateexecuted,omitempty"`
	Timeexecuted  string `protobuf:"bytes,11,opt,name=timeexecuted,proto3" json:"timeexecuted,omitempty"`
	Status        string `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *Will) Reset()         { *m = Will{} }
func (m *Will) String() string { return proto.CompactTextString(m) }
func (*Will) ProtoMessage()    {}
func (*Will) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ceb8b33dd670aa3, []int{0}
}
func (m *Will) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Will) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Will.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Will) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Will.Merge(m, src)
}
func (m *Will) XXX_Size() int {
	return m.Size()
}
func (m *Will) XXX_DiscardUnknown() {
	xxx_messageInfo_Will.DiscardUnknown(m)
}

var xxx_messageInfo_Will proto.InternalMessageInfo

func (m *Will) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Will) GetTestatorname() string {
	if m != nil {
		return m.Testatorname
	}
	return ""
}

func (m *Will) GetTestatorid() string {
	if m != nil {
		return m.Testatorid
	}
	return ""
}

func (m *Will) GetBeneficiaries() string {
	if m != nil {
		return m.Beneficiaries
	}
	return ""
}

func (m *Will) GetAssets() string {
	if m != nil {
		return m.Assets
	}
	return ""
}

func (m *Will) GetExecutorname() string {
	if m != nil {
		return m.Executorname
	}
	return ""
}

func (m *Will) GetExecutorid() string {
	if m != nil {
		return m.Executorid
	}
	return ""
}

func (m *Will) GetDatecreated() string {
	if m != nil {
		return m.Datecreated
	}
	return ""
}

func (m *Will) GetTimecreated() string {
	if m != nil {
		return m.Timecreated
	}
	return ""
}

func (m *Will) GetDateexecuted() string {
	if m != nil {
		return m.Dateexecuted
	}
	return ""
}

func (m *Will) GetTimeexecuted() string {
	if m != nil {
		return m.Timeexecuted
	}
	return ""
}

func (m *Will) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*Will)(nil), "willstorage.will.Will")
}

func init() { proto.RegisterFile("will/will.proto", fileDescriptor_3ceb8b33dd670aa3) }

var fileDescriptor_3ceb8b33dd670aa3 = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0xe3, 0x34, 0x04, 0xea, 0x96, 0x3f, 0xf2, 0x80, 0x3c, 0x59, 0x51, 0xc5, 0xd0, 0xa9,
	0x91, 0xe0, 0x0d, 0x78, 0x84, 0x2e, 0x48, 0x6c, 0x6e, 0x7c, 0xa0, 0x93, 0x92, 0xa6, 0xb2, 0x5d,
	0x51, 0x36, 0x1e, 0x81, 0xc7, 0x62, 0xec, 0xc8, 0x88, 0x92, 0x17, 0x41, 0xb6, 0x9b, 0xd6, 0x5d,
	0xac, 0xfb, 0x7e, 0xfe, 0x6c, 0x7d, 0x77, 0x47, 0x6f, 0x3f, 0xb0, 0xae, 0x4b, 0x77, 0x2c, 0x36,
	0xba, 0xb5, 0x2d, 0xbb, 0x73, 0xb5, 0xb1, 0xad, 0x96, 0xef, 0xb0, 0x70, 0xf5, 0xec, 0x6b, 0x44,
	0xb3, 0x17, 0xac, 0x6b, 0x76, 0x43, 0x53, 0x54, 0x9c, 0x14, 0x64, 0x9e, 0x2d, 0x53, 0x54, 0x6c,
	0x46, 0xa7, 0x16, 0x8c, 0x95, 0xb6, 0xd5, 0x6b, 0xd9, 0x00, 0x4f, 0x0b, 0x32, 0x1f, 0x2f, 0xcf,
	0x18, 0x13, 0x94, 0x0e, 0x1a, 0x15, 0x1f, 0x79, 0x47, 0x44, 0xd8, 0x03, 0xbd, 0x5e, 0xc1, 0x1a,
	0xde, 0xb0, 0x42, 0xa9, 0x11, 0x0c, 0xcf, 0xbc, 0xe5, 0x1c, 0xb2, 0x7b, 0x9a, 0x4b, 0x63, 0xc0,
	0x1a, 0x7e, 0xe1, 0xaf, 0x0f, 0xca, 0x25, 0x80, 0x1d, 0x54, 0xdb, 0x21, 0x41, 0x1e, 0x12, 0xc4,
	0xcc, 0x25, 0x18, 0x34, 0x2a, 0x7e, 0x19, 0x12, 0x9c, 0x08, 0x2b, 0xe8, 0x44, 0x49, 0x0b, 0x95,
	0x06, 0x69, 0x41, 0xf1, 0x2b, 0x6f, 0x88, 0x91, 0x73, 0x58, 0x6c, 0x8e, 0x8e, 0x71, 0x70, 0x44,
	0xc8, 0xe5, 0x70, 0x0f, 0xc2, 0xaf, 0xa0, 0x38, 0x0d, 0x39, 0x62, 0xe6, 0xa7, 0x85, 0xcd, 0xc9,
	0x33, 0x39, 0x4c, 0x2b, 0x62, 0xae, 0x4f, 0x37, 0x99, 0xad, 0xe1, 0xd3, 0xd0, 0x67, 0x50, 0xcf,
	0x8f, 0x3f, 0x9d, 0x20, 0xfb, 0x4e, 0x90, 0xbf, 0x4e, 0x90, 0xef, 0x5e, 0x24, 0xfb, 0x5e, 0x24,
	0xbf, 0xbd, 0x48, 0x5e, 0x79, 0xb4, 0xae, 0x72, 0xe7, 0x17, 0x59, 0xda, 0xcf, 0x0d, 0x98, 0x55,
	0xee, 0xf7, 0xf9, 0xf4, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x5a, 0xe8, 0xf0, 0xe6, 0xe2, 0x01, 0x00,
	0x00,
}

func (m *Will) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Will) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Will) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintWill(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Timeexecuted) > 0 {
		i -= len(m.Timeexecuted)
		copy(dAtA[i:], m.Timeexecuted)
		i = encodeVarintWill(dAtA, i, uint64(len(m.Timeexecuted)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Dateexecuted) > 0 {
		i -= len(m.Dateexecuted)
		copy(dAtA[i:], m.Dateexecuted)
		i = encodeVarintWill(dAtA, i, uint64(len(m.Dateexecuted)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Timecreated) > 0 {
		i -= len(m.Timecreated)
		copy(dAtA[i:], m.Timecreated)
		i = encodeVarintWill(dAtA, i, uint64(len(m.Timecreated)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Datecreated) > 0 {
		i -= len(m.Datecreated)
		copy(dAtA[i:], m.Datecreated)
		i = encodeVarintWill(dAtA, i, uint64(len(m.Datecreated)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Executorid) > 0 {
		i -= len(m.Executorid)
		copy(dAtA[i:], m.Executorid)
		i = encodeVarintWill(dAtA, i, uint64(len(m.Executorid)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Executorname) > 0 {
		i -= len(m.Executorname)
		copy(dAtA[i:], m.Executorname)
		i = encodeVarintWill(dAtA, i, uint64(len(m.Executorname)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Assets) > 0 {
		i -= len(m.Assets)
		copy(dAtA[i:], m.Assets)
		i = encodeVarintWill(dAtA, i, uint64(len(m.Assets)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Beneficiaries) > 0 {
		i -= len(m.Beneficiaries)
		copy(dAtA[i:], m.Beneficiaries)
		i = encodeVarintWill(dAtA, i, uint64(len(m.Beneficiaries)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Testatorid) > 0 {
		i -= len(m.Testatorid)
		copy(dAtA[i:], m.Testatorid)
		i = encodeVarintWill(dAtA, i, uint64(len(m.Testatorid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Testatorname) > 0 {
		i -= len(m.Testatorname)
		copy(dAtA[i:], m.Testatorname)
		i = encodeVarintWill(dAtA, i, uint64(len(m.Testatorname)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintWill(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWill(dAtA []byte, offset int, v uint64) int {
	offset -= sovWill(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Will) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWill(uint64(m.Id))
	}
	l = len(m.Testatorname)
	if l > 0 {
		n += 1 + l + sovWill(uint64(l))
	}
	l = len(m.Testatorid)
	if l > 0 {
		n += 1 + l + sovWill(uint64(l))
	}
	l = len(m.Beneficiaries)
	if l > 0 {
		n += 1 + l + sovWill(uint64(l))
	}
	l = len(m.Assets)
	if l > 0 {
		n += 1 + l + sovWill(uint64(l))
	}
	l = len(m.Executorname)
	if l > 0 {
		n += 1 + l + sovWill(uint64(l))
	}
	l = len(m.Executorid)
	if l > 0 {
		n += 1 + l + sovWill(uint64(l))
	}
	l = len(m.Datecreated)
	if l > 0 {
		n += 1 + l + sovWill(uint64(l))
	}
	l = len(m.Timecreated)
	if l > 0 {
		n += 1 + l + sovWill(uint64(l))
	}
	l = len(m.Dateexecuted)
	if l > 0 {
		n += 1 + l + sovWill(uint64(l))
	}
	l = len(m.Timeexecuted)
	if l > 0 {
		n += 1 + l + sovWill(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovWill(uint64(l))
	}
	return n
}

func sovWill(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWill(x uint64) (n int) {
	return sovWill(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Will) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Will: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Will: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Testatorname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Testatorname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Testatorid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Testatorid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beneficiaries", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Beneficiaries = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executorname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executorname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executorid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executorid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datecreated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datecreated = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timecreated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timecreated = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dateexecuted", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dateexecuted = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeexecuted", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timeexecuted = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWill
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWill
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWill(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWill
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWill
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWill
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWill
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWill
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWill
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWill        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWill          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWill = fmt.Errorf("proto: unexpected end of group")
)
